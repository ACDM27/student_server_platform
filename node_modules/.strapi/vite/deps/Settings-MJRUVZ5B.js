import {
  getTrad,
  useGetInfoQuery,
  useUpdateSettingsMutation
} from "./chunk-DEWTR7LJ.js";
import "./chunk-B6EO6WX2.js";
import "./chunk-3BZULUBL.js";
import "./chunk-EX3TGXSV.js";
import "./chunk-BQHRPIYJ.js";
import "./chunk-QA2L4SJL.js";
import "./chunk-NUQRZSY2.js";
import "./chunk-7H7IMLNQ.js";
import "./chunk-R5XWNOT4.js";
import "./chunk-IPPILTDN.js";
import "./chunk-WHL2QGIR.js";
import "./chunk-QTHD7V5X.js";
import "./chunk-JPVSMWAU.js";
import "./chunk-E3VHUDPV.js";
import "./chunk-ST42JYQ3.js";
import "./chunk-FEIHNUYC.js";
import "./chunk-67BT3S2B.js";
import "./chunk-TYC2NXUR.js";
import "./chunk-7V2PW3AP.js";
import "./chunk-PSDF2ABQ.js";
import "./chunk-RXO7GQ3N.js";
import "./chunk-UG5CKROF.js";
import "./chunk-JSEIRYGG.js";
import "./chunk-KIUVY3CF.js";
import "./chunk-FK5FT5KJ.js";
import "./chunk-5MJMU3FJ.js";
import "./chunk-GKP2Z5UX.js";
import "./chunk-BQKJUKUJ.js";
import "./chunk-VTKKSFSO.js";
import "./chunk-6DSYDUUK.js";
import "./chunk-CMWIKCPA.js";
import "./chunk-TEIH6PQ7.js";
import "./chunk-3SUYV3EL.js";
import "./chunk-TDMX5TJC.js";
import "./chunk-YMPTEC3X.js";
import "./chunk-6B3Q3EQ4.js";
import "./chunk-O43PIL7I.js";
import "./chunk-USPKBFB5.js";
import "./chunk-MLJHMVRP.js";
import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  Main,
  TextInput,
  Toggle,
  Typography
} from "./chunk-SHKTD3ZJ.js";
import {
  PERMISSIONS
} from "./chunk-HWUKOP6W.js";
import {
  ForwardRef$3B,
  ForwardRef$3D,
  ForwardRef$4F
} from "./chunk-FFTUNS7P.js";
import "./chunk-E77A4KDK.js";
import "./chunk-53SQFFAU.js";
import "./chunk-NAHNK2WN.js";
import "./chunk-ZK7SS7BJ.js";
import "./chunk-AJDZSWA5.js";
import "./chunk-QW25QXXP.js";
import "./chunk-NAY3AVJW.js";
import "./chunk-VTJUU5GI.js";
import "./chunk-CLVK3YY6.js";
import "./chunk-PH6PQT57.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-NB6YLULU.js";
import "./chunk-6ZXKSCA2.js";
import "./chunk-U5MPEUL2.js";
import "./chunk-WWBFINLQ.js";
import "./chunk-EMBZUV2P.js";
import "./chunk-6LY4MOO2.js";
import "./chunk-G6RCME2G.js";
import "./chunk-PTQYK5QC.js";
import "./chunk-I7KSYMIP.js";
import "./chunk-KCCMAIBH.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-H4GPAAVJ.js";
import "./chunk-FICQS5RO.js";
import "./chunk-EFHTTJY3.js";
import "./chunk-LJLS2DW6.js";
import "./chunk-C7H2BX76.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-T26MCMMW.js";
import "./chunk-WSXYE5QV.js";
import "./chunk-MAYBM4US.js";
import "./chunk-4QC3H4VA.js";
import "./chunk-XNACAI67.js";
import "./chunk-QEQLI7DQ.js";
import "./chunk-343OTFBC.js";
import "./chunk-3ZDTXCAV.js";
import "./chunk-K4WWAKP2.js";
import "./chunk-PVYHQI53.js";
import "./chunk-QIJGNK42.js";
import "./chunk-SL4XJTUD.js";
import "./chunk-ENZ6M6UM.js";
import "./chunk-LCCJ2AUW.js";
import "./chunk-MIWLROWE.js";
import "./chunk-XG4MHFPM.js";
import "./chunk-BQXWUJBB.js";
import "./chunk-T5UL4PIA.js";
import "./chunk-VOZ6J4FJ.js";
import "./chunk-G2VSF5GD.js";
import "./chunk-3DRZIGZ7.js";
import "./chunk-QE6UH645.js";
import "./chunk-ORF44PZ5.js";
import "./chunk-QPAQDQL5.js";
import "./chunk-WN2W3P3V.js";
import "./chunk-I43SBXRQ.js";
import {
  useRBAC
} from "./chunk-ZRTAFXXQ.js";
import "./chunk-PCI72ACW.js";
import "./chunk-RJARUFLG.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-YJEURQPS.js";
import "./chunk-4RQE36J6.js";
import "./chunk-K65KIEAL.js";
import "./chunk-GGK2TLCV.js";
import "./chunk-S6E25AYJ.js";
import {
  Form,
  Formik
} from "./chunk-47HVXV2R.js";
import "./chunk-EJTHFIEG.js";
import "./chunk-GJZQYYQM.js";
import "./chunk-JMI7LPLL.js";
import {
  errorsTrads
} from "./chunk-IFOFBKTA.js";
import {
  create3 as create,
  create4 as create2,
  create6 as create3
} from "./chunk-RNSDRCTV.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-X6BINP7R.js";
import {
  Layouts
} from "./chunk-UBKVC2YR.js";
import "./chunk-W65VJ5OT.js";
import "./chunk-ZHJSTQ3V.js";
import "./chunk-XNJL77D3.js";
import "./chunk-MTBXOCRQ.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-EO475H5D.js";
import "./chunk-TLHDHNYG.js";
import "./chunk-MRMFNXLR.js";
import {
  useNotification
} from "./chunk-QOSUY4O2.js";
import "./chunk-QTPKPXVG.js";
import "./chunk-UZXPPQG4.js";
import "./chunk-UZO674YT.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-TFEDHJAK.js";
import "./chunk-FNE42MP6.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import "./chunk-TWUOKWZL.js";
import {
  useIntl
} from "./chunk-X3RW5WR5.js";
import "./chunk-S65ZWNEO.js";
import "./chunk-HLA3JVJK.js";
import "./chunk-QW5ZDDTU.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-FOD4ENRR.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/@strapi/plugin-documentation/dist/admin/components/SettingsForm.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var schema = create3().shape({
  restrictedAccess: create(),
  password: create2().when("restrictedAccess", (value, initSchema) => {
    return value ? initSchema.required(errorsTrads.required.id).min(8).matches(/[a-z]/, "components.Input.error.contain.lowercase").matches(/[A-Z]/, "components.Input.error.contain.uppercase").matches(/\d/, "components.Input.error.contain.number") : initSchema;
  })
});
var FieldActionWrapper = dt(Field.Action)`
  svg {
    height: 1.6rem;
    width: 1.6rem;
    path {
      fill: ${({ theme }) => theme.colors.neutral600};
    }
  }
`;
var SettingsForm = ({ data, onSubmit }) => {
  const { formatMessage } = useIntl();
  const [passwordShown, setPasswordShown] = React.useState(false);
  const { allowedActions } = useRBAC(PERMISSIONS);
  return (0, import_jsx_runtime.jsx)(Formik, {
    enableReinitialize: true,
    initialValues: {
      restrictedAccess: (data == null ? void 0 : data.documentationAccess.restrictedAccess) || false,
      password: ""
    },
    onSubmit,
    validationSchema: schema,
    children: ({ handleSubmit, values, handleChange, errors, setFieldTouched, setFieldValue, setFieldError, dirty }) => {
      return (0, import_jsx_runtime.jsxs)(Form, {
        noValidate: true,
        onSubmit: handleSubmit,
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title: formatMessage({
              id: getTrad("plugin.name"),
              defaultMessage: "Documentation"
            }),
            subtitle: formatMessage({
              id: getTrad("pages.SettingsPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(Button, {
              type: "submit",
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4F, {}),
              disabled: !dirty && allowedActions.canUpdate,
              children: formatMessage({
                id: getTrad("pages.SettingsPage.Button.save"),
                defaultMessage: "Save"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              background: "neutral0",
              hasRadius: true,
              shadow: "filterShadow",
              paddingTop: 6,
              paddingBottom: 6,
              paddingLeft: 7,
              paddingRight: 7,
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 4,
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "delta",
                    tag: "h2",
                    children: formatMessage({
                      id: "global.settings",
                      defaultMessage: "Settings"
                    })
                  }),
                  (0, import_jsx_runtime.jsxs)(Grid.Root, {
                    gap: 4,
                    children: [
                      (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "restrictedAccess",
                          hint: formatMessage({
                            id: getTrad("pages.SettingsPage.toggle.hint"),
                            defaultMessage: "Make the documentation endpoint private"
                          }),
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: getTrad("pages.SettingsPage.toggle.label"),
                                defaultMessage: "Restricted Access"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Toggle, {
                              checked: values.restrictedAccess,
                              onChange: () => {
                                if (values.restrictedAccess === true) {
                                  setFieldValue("password", "", false);
                                  setFieldTouched("password", false, false);
                                  setFieldError("password", void 0);
                                }
                                setFieldValue("restrictedAccess", !values.restrictedAccess, false);
                              },
                              onLabel: "On",
                              offLabel: "Off"
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Hint, {})
                          ]
                        })
                      }),
                      values.restrictedAccess && (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "password",
                          error: errors.password ? formatMessage({
                            id: errors.password,
                            defaultMessage: errors.password
                          }) : void 0,
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: "global.password",
                                defaultMessage: "Password"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(TextInput, {
                              placeholder: "**********",
                              type: passwordShown ? "text" : "password",
                              value: values.password,
                              onChange: handleChange,
                              endAction: (0, import_jsx_runtime.jsx)(FieldActionWrapper, {
                                onClick: (e) => {
                                  e.stopPropagation();
                                  setPasswordShown((prev) => !prev);
                                },
                                label: formatMessage(passwordShown ? {
                                  id: "Auth.form.password.show-password",
                                  defaultMessage: "Show password"
                                } : {
                                  id: "Auth.form.password.hide-password",
                                  defaultMessage: "Hide password"
                                }),
                                children: passwordShown ? (0, import_jsx_runtime.jsx)(ForwardRef$3D, {}) : (0, import_jsx_runtime.jsx)(ForwardRef$3B, {})
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Error, {})
                          ]
                        })
                      })
                    ]
                  })
                ]
              })
            })
          })
        ]
      });
    }
  });
};

// node_modules/@strapi/plugin-documentation/dist/admin/utils/baseQuery.mjs
var isBaseQueryError = (error) => {
  return error.name !== void 0;
};

// node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var SettingsPage = () => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError, _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();
  const { data, isError, isLoading, isFetching } = useGetInfoQuery();
  const [updateSettings] = useUpdateSettingsMutation();
  const onUpdateSettings = async (body, formik) => {
    return updateSettings({
      body
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.update.success"),
          defaultMessage: "Successfully updated settings"
        })
      });
    }).catch((err) => {
      if (isBaseQueryError(err) && err.name === "ValidationError") {
        toggleNotification({
          type: "danger",
          message: formatAPIError(err)
        });
      }
    });
  };
  if (isLoading || isFetching) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime2.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime2.jsx)(Main, {
    children: (0, import_jsx_runtime2.jsx)(SettingsForm, {
      data,
      onSubmit: onUpdateSettings
    })
  });
};
export {
  SettingsPage
};
//# sourceMappingURL=Settings-MJRUVZ5B.js.map
