import {
  getTrad,
  useDeleteVersionMutation,
  useGetInfoQuery,
  useRegenerateDocMutation
} from "./chunk-DEWTR7LJ.js";
import "./chunk-B6EO6WX2.js";
import "./chunk-3BZULUBL.js";
import "./chunk-EX3TGXSV.js";
import "./chunk-BQHRPIYJ.js";
import "./chunk-QA2L4SJL.js";
import "./chunk-NUQRZSY2.js";
import "./chunk-7H7IMLNQ.js";
import "./chunk-R5XWNOT4.js";
import "./chunk-IPPILTDN.js";
import "./chunk-WHL2QGIR.js";
import "./chunk-QTHD7V5X.js";
import "./chunk-JPVSMWAU.js";
import "./chunk-E3VHUDPV.js";
import "./chunk-ST42JYQ3.js";
import "./chunk-FEIHNUYC.js";
import "./chunk-67BT3S2B.js";
import "./chunk-TYC2NXUR.js";
import "./chunk-7V2PW3AP.js";
import "./chunk-PSDF2ABQ.js";
import "./chunk-RXO7GQ3N.js";
import "./chunk-UG5CKROF.js";
import "./chunk-JSEIRYGG.js";
import "./chunk-KIUVY3CF.js";
import "./chunk-FK5FT5KJ.js";
import "./chunk-5MJMU3FJ.js";
import "./chunk-GKP2Z5UX.js";
import "./chunk-BQKJUKUJ.js";
import "./chunk-VTKKSFSO.js";
import "./chunk-6DSYDUUK.js";
import "./chunk-CMWIKCPA.js";
import "./chunk-TEIH6PQ7.js";
import "./chunk-3SUYV3EL.js";
import "./chunk-TDMX5TJC.js";
import "./chunk-YMPTEC3X.js";
import "./chunk-6B3Q3EQ4.js";
import "./chunk-O43PIL7I.js";
import "./chunk-USPKBFB5.js";
import "./chunk-MLJHMVRP.js";
import {
  Dialog,
  EmptyStateLayout,
  Flex,
  IconButton,
  LinkButton,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography
} from "./chunk-SHKTD3ZJ.js";
import {
  PERMISSIONS
} from "./chunk-HWUKOP6W.js";
import {
  ForwardRef$3D,
  ForwardRef$5n,
  ForwardRef$j
} from "./chunk-FFTUNS7P.js";
import "./chunk-E77A4KDK.js";
import "./chunk-53SQFFAU.js";
import "./chunk-NAHNK2WN.js";
import "./chunk-ZK7SS7BJ.js";
import "./chunk-AJDZSWA5.js";
import "./chunk-QW25QXXP.js";
import "./chunk-NAY3AVJW.js";
import "./chunk-VTJUU5GI.js";
import "./chunk-CLVK3YY6.js";
import "./chunk-PH6PQT57.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-NB6YLULU.js";
import "./chunk-6ZXKSCA2.js";
import "./chunk-U5MPEUL2.js";
import "./chunk-WWBFINLQ.js";
import "./chunk-EMBZUV2P.js";
import "./chunk-6LY4MOO2.js";
import "./chunk-G6RCME2G.js";
import "./chunk-PTQYK5QC.js";
import "./chunk-I7KSYMIP.js";
import "./chunk-KCCMAIBH.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-H4GPAAVJ.js";
import "./chunk-FICQS5RO.js";
import "./chunk-EFHTTJY3.js";
import "./chunk-LJLS2DW6.js";
import "./chunk-C7H2BX76.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-T26MCMMW.js";
import "./chunk-WSXYE5QV.js";
import "./chunk-MAYBM4US.js";
import "./chunk-4QC3H4VA.js";
import "./chunk-XNACAI67.js";
import "./chunk-QEQLI7DQ.js";
import "./chunk-343OTFBC.js";
import "./chunk-3ZDTXCAV.js";
import "./chunk-K4WWAKP2.js";
import "./chunk-PVYHQI53.js";
import "./chunk-QIJGNK42.js";
import "./chunk-SL4XJTUD.js";
import "./chunk-ENZ6M6UM.js";
import "./chunk-LCCJ2AUW.js";
import "./chunk-MIWLROWE.js";
import "./chunk-XG4MHFPM.js";
import "./chunk-BQXWUJBB.js";
import "./chunk-T5UL4PIA.js";
import "./chunk-VOZ6J4FJ.js";
import "./chunk-G2VSF5GD.js";
import "./chunk-3DRZIGZ7.js";
import "./chunk-QE6UH645.js";
import "./chunk-ORF44PZ5.js";
import "./chunk-QPAQDQL5.js";
import "./chunk-WN2W3P3V.js";
import {
  ConfirmDialog
} from "./chunk-I43SBXRQ.js";
import {
  useRBAC
} from "./chunk-ZRTAFXXQ.js";
import "./chunk-PCI72ACW.js";
import "./chunk-RJARUFLG.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-YJEURQPS.js";
import "./chunk-4RQE36J6.js";
import "./chunk-K65KIEAL.js";
import "./chunk-GGK2TLCV.js";
import "./chunk-S6E25AYJ.js";
import "./chunk-47HVXV2R.js";
import "./chunk-EJTHFIEG.js";
import "./chunk-GJZQYYQM.js";
import "./chunk-JMI7LPLL.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-RNSDRCTV.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-X6BINP7R.js";
import {
  Layouts
} from "./chunk-UBKVC2YR.js";
import "./chunk-W65VJ5OT.js";
import "./chunk-ZHJSTQ3V.js";
import "./chunk-XNJL77D3.js";
import "./chunk-MTBXOCRQ.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-EO475H5D.js";
import "./chunk-TLHDHNYG.js";
import "./chunk-MRMFNXLR.js";
import {
  useNotification
} from "./chunk-QOSUY4O2.js";
import "./chunk-QTPKPXVG.js";
import "./chunk-UZXPPQG4.js";
import "./chunk-UZO674YT.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-TFEDHJAK.js";
import "./chunk-FNE42MP6.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import "./chunk-TWUOKWZL.js";
import {
  useIntl
} from "./chunk-X3RW5WR5.js";
import "./chunk-S65ZWNEO.js";
import "./chunk-HLA3JVJK.js";
import "./chunk-QW5ZDDTU.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-FOD4ENRR.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-documentation/dist/admin/pages/App.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var App = () => {
  var _a;
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { data, isLoading: isLoadingInfo, isError } = useGetInfoQuery();
  const [regenerate] = useRegenerateDocMutation();
  const [deleteVersion] = useDeleteVersionMutation();
  const [showConfirmDelete, setShowConfirmDelete] = React.useState(false);
  const [versionToDelete, setVersionToDelete] = React.useState();
  const { allowedActions, isLoading: isLoadingRBAC } = useRBAC(PERMISSIONS);
  const isLoading = isLoadingInfo || isLoadingRBAC;
  const colCount = 4;
  const rowCount = (((_a = data == null ? void 0 : data.docVersions) == null ? void 0 : _a.length) || 0) + 1;
  const handleRegenerateDoc = (version) => {
    regenerate({
      version
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.generate.success"),
          defaultMessage: "Successfully generated documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
  };
  const handleConfirmDelete = async () => {
    if (!versionToDelete) {
      return;
    }
    await deleteVersion({
      version: versionToDelete
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.delete.success"),
          defaultMessage: "Successfully deleted documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
    setShowConfirmDelete(!showConfirmDelete);
  };
  const handleClickDelete = (version) => {
    setVersionToDelete(version);
    setShowConfirmDelete(!showConfirmDelete);
  };
  const title = formatMessage({
    id: getTrad("plugin.name"),
    defaultMessage: "Documentation"
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: title
      }),
      (0, import_jsx_runtime.jsxs)(Page.Main, {
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title,
            subtitle: formatMessage({
              id: getTrad("pages.PluginPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(OpenDocLink, {
              disabled: !allowedActions.canRead || !(data == null ? void 0 : data.currentVersion) || !(data == null ? void 0 : data.prefix),
              href: createDocumentationHref(`${data == null ? void 0 : data.prefix}/v${data == null ? void 0 : data.currentVersion}`),
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3D, {}),
              children: formatMessage({
                id: getTrad("pages.PluginPage.Button.open"),
                defaultMessage: "Open Documentation"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (data == null ? void 0 : data.docVersions.length) ? (0, import_jsx_runtime.jsxs)(Table, {
              colCount,
              rowCount,
              children: [
                (0, import_jsx_runtime.jsx)(Thead, {
                  children: (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.version"),
                            defaultMessage: "Version"
                          })
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.generated"),
                            defaultMessage: "Last Generated"
                          })
                        })
                      })
                    ]
                  })
                }),
                (0, import_jsx_runtime.jsx)(Tbody, {
                  children: data.docVersions.slice(0).sort((a, b) => a.generatedDate < b.generatedDate ? 1 : -1).map((doc) => (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.version
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.generatedDate
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        children: (0, import_jsx_runtime.jsxs)(Flex, {
                          justifyContent: "end",
                          onClick: (e) => e.stopPropagation(),
                          children: [
                            (0, import_jsx_runtime.jsx)(IconButton, {
                              tag: "a",
                              disabled: !allowedActions.canRead,
                              href: createDocumentationHref(`${data.prefix}/v${doc.version}`),
                              variant: "ghost",
                              target: "_blank",
                              rel: "noopener noreferrer",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.show"),
                                defaultMessage: "Open {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$3D, {})
                            }),
                            allowedActions.canRegenerate ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleRegenerateDoc(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.regenerate"),
                                defaultMessage: "Regenerate {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$5n, {})
                            }) : null,
                            allowedActions.canUpdate && doc.version !== data.currentVersion ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleClickDelete(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: "global.delete-target",
                                defaultMessage: "Delete {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$j, {})
                            }) : null
                          ]
                        })
                      })
                    ]
                  }, doc.version))
                })
              ]
            }) : (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
              content: "",
              icon: null
            })
          }),
          (0, import_jsx_runtime.jsx)(Dialog.Root, {
            open: showConfirmDelete,
            onOpenChange: setShowConfirmDelete,
            children: (0, import_jsx_runtime.jsx)(ConfirmDialog, {
              onConfirm: handleConfirmDelete
            })
          })
        ]
      })
    ]
  });
};
var OpenDocLink = dt(LinkButton)`
  text-decoration: none;
`;
var createDocumentationHref = (path) => {
  if (path.startsWith("http")) {
    return path;
  }
  if (path.startsWith("/")) {
    return `${window.strapi.backendURL}${path}`;
  }
  return `${window.strapi.backendURL}/${path}`;
};
export {
  App
};
//# sourceMappingURL=App-KMLKKQSM.js.map
