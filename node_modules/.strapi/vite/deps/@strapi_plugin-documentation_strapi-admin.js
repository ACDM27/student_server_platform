import {
  ForwardRef$2D,
  PERMISSIONS,
  pluginId
} from "./chunk-QS7LLXGO.js";
import "./chunk-OWKUITKV.js";
import "./chunk-OTBGQ7VC.js";
import "./chunk-I3AIFIJ5.js";
import "./chunk-PLDDJCW6.js";

// node_modules/.pnpm/@strapi+plugin-documentatio_d45989cbbf88be859e2e5cffc0725e8f/node_modules/@strapi/plugin-documentation/dist/admin/utils/prefixPluginTranslations.mjs
var prefixPluginTranslations = (trad, pluginId2) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId2}.${current}`] = trad[current];
    return acc;
  }, {});
};

// node_modules/.pnpm/@strapi+plugin-documentatio_d45989cbbf88be859e2e5cffc0725e8f/node_modules/@strapi/plugin-documentation/dist/admin/index.mjs
function __variableDynamicImportRuntime2__(path) {
  switch (path) {
    case "./translations/ar.json":
      return import("./ar.json-3BJSX74W.js");
    case "./translations/cs.json":
      return import("./cs.json-VRTZBIPA.js");
    case "./translations/de.json":
      return import("./de.json-6KQVWQKZ.js");
    case "./translations/dk.json":
      return import("./dk.json-KQ4JNXBF.js");
    case "./translations/en.json":
      return import("./en.json-NSBKPIDF.js");
    case "./translations/es.json":
      return import("./es.json-HDW4QJSM.js");
    case "./translations/fr.json":
      return import("./fr.json-INNPMY7C.js");
    case "./translations/id.json":
      return import("./id.json-P5UPVXTX.js");
    case "./translations/it.json":
      return import("./it.json-VLLBMTPK.js");
    case "./translations/ko.json":
      return import("./ko.json-INLHJYJN.js");
    case "./translations/ms.json":
      return import("./ms.json-M2QPNL2U.js");
    case "./translations/nl.json":
      return import("./nl.json-3HGJHQ44.js");
    case "./translations/pl.json":
      return import("./pl.json-S2HM3BTB.js");
    case "./translations/pt-BR.json":
      return import("./pt-BR.json-F64UEGP4.js");
    case "./translations/pt.json":
      return import("./pt.json-SPNJ3V5O.js");
    case "./translations/ru.json":
      return import("./ru.json-SESKIXZE.js");
    case "./translations/sk.json":
      return import("./sk.json-JST6ANX3.js");
    case "./translations/sv.json":
      return import("./sv.json-AZBAM5YB.js");
    case "./translations/th.json":
      return import("./th.json-6RTYSXLT.js");
    case "./translations/tr.json":
      return import("./tr.json-4EQK2JIU.js");
    case "./translations/uk.json":
      return import("./uk.json-2DS23HKK.js");
    case "./translations/vi.json":
      return import("./vi.json-Z6767YEO.js");
    case "./translations/zh-Hans.json":
      return import("./zh-Hans.json-TIQPITGK.js");
    case "./translations/zh.json":
      return import("./zh.json-2NMWKX3Y.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var index = {
  register(app) {
    app.addMenuLink({
      to: `plugins/${pluginId}`,
      icon: ForwardRef$2D,
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: "Documentation"
      },
      permissions: PERMISSIONS.main,
      Component: async () => {
        const { App } = await import("./App-NI5UPSL4.js");
        return App;
      },
      position: 9
    });
    app.registerPlugin({
      id: pluginId,
      name: pluginId
    });
  },
  bootstrap(app) {
    app.addSettingsLink("global", {
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: "Documentation"
      },
      id: "documentation",
      to: pluginId,
      Component: async () => {
        const { SettingsPage } = await import("./Settings-KXX5L7TO.js");
        return SettingsPage;
      },
      permissions: PERMISSIONS.main
    });
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime2__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, pluginId),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};
export {
  index as default
};
//# sourceMappingURL=@strapi_plugin-documentation_strapi-admin.js.map
