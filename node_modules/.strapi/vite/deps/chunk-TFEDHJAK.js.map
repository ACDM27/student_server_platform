{
  "version": 3,
  "sources": ["../../../@strapi/admin/node_modules/use-context-selector/src/index.ts", "../../../@strapi/admin/admin/src/components/Context.tsx"],
  "sourcesContent": ["import {\n  ComponentType,\n  Context as ContextOrig,\n  MutableRefObject,\n  Provider,\n  ReactNode,\n  createElement,\n  createContext as createContextOrig,\n  useContext as useContextOrig,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { batchedUpdates } from './batchedUpdates';\n\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\n\nconst isSSR = typeof window === 'undefined'\n  || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\n\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = runWithPriority\n  ? (thunk: () => void) => runWithPriority(NormalPriority, thunk)\n  : (thunk: () => void) => thunk();\n\ntype Version = number;\ntype Listener<Value> = (\n  action: { n: Version, p?: Promise<Value>, v?: Value }\n) => void\n\ntype ContextValue<Value> = {\n  [CONTEXT_VALUE]: {\n    /* \"v\"alue     */ v: MutableRefObject<Value>;\n    /* versio\"n\"   */ n: MutableRefObject<Version>;\n    /* \"l\"isteners */ l: Set<Listener<Value>>;\n    /* \"u\"pdate    */ u: (thunk: () => void, options?: { suspense: boolean }) => void;\n  };\n};\n\nexport interface Context<Value> {\n  Provider: ComponentType<{ value: Value; children: ReactNode }>;\n  displayName?: string;\n}\n\nconst createProvider = <Value>(\n  ProviderOrig: Provider<ContextValue<Value>>,\n) => {\n  const ContextProvider = ({ value, children }: { value: Value; children: ReactNode }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const [resolve, setResolve] = useState<((v: Value) => void) | null>(null);\n    if (resolve) {\n      resolve(value);\n      setResolve(null);\n    }\n    const contextValue = useRef<ContextValue<Value>>();\n    if (!contextValue.current) {\n      const listeners = new Set<Listener<Value>>();\n      const update = (thunk: () => void, options?: { suspense: boolean }) => {\n        batchedUpdates(() => {\n          versionRef.current += 1;\n          const action: Parameters<Listener<Value>>[0] = {\n            n: versionRef.current,\n          };\n          if (options?.suspense) {\n            action.n *= -1; // this is intentional to make it temporary version\n            action.p = new Promise<Value>((r) => {\n              setResolve(() => (v: Value) => {\n                action.v = v;\n                delete action.p;\n                r(v);\n              });\n            });\n          }\n          listeners.forEach((listener) => listener(action));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */ v: valueRef,\n          /* versio\"n\"   */ n: versionRef,\n          /* \"l\"isteners */ l: listeners,\n          /* \"u\"pdate    */ u: update,\n        },\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        (contextValue.current as ContextValue<Value>)[CONTEXT_VALUE].l.forEach((listener) => {\n          listener({ n: versionRef.current, v: value });\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, { value: contextValue.current }, children);\n  };\n  return ContextProvider;\n};\n\nconst identity = <T>(x: T) => x;\n\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport function createContext<Value>(defaultValue: Value) {\n  const context = createContextOrig<ContextValue<Value>>({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */ v: { current: defaultValue },\n      /* versio\"n\"   */ n: { current: -1 },\n      /* \"l\"isteners */ l: new Set(),\n      /* \"u\"pdate    */ u: (f) => f(),\n    },\n  });\n  (context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<ContextValue<Value>>;\n  })[ORIGINAL_PROVIDER] = context.Provider;\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\n  delete (context as any).Consumer; // no support for Consumer\n  return context as unknown as Context<Value>;\n}\n\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport function useContextSelector<Value, Selected>(\n  context: Context<Value>,\n  selector: (value: Value) => Selected,\n) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */ v: { current: value },\n    /* versio\"n\"   */ n: { current: version },\n    /* \"l\"isteners */ l: listeners,\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((\n    prev: readonly [Value, Selected],\n    action?: Parameters<Listener<Value>>[0],\n  ) => {\n    if (!action) {\n      // case for `dispatch()` below\n      return [value, selected] as const;\n    }\n    if ('p' in action) {\n      throw action.p;\n    }\n    if (action.n === version) {\n      if (Object.is(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected] as const;\n    }\n    try {\n      if ('v' in action) {\n        if (Object.is(prev[0], action.v)) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(action.v);\n        if (Object.is(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [action.v, nextSelected] as const;\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev] as const; // schedule update\n  }, [value, selected] as const);\n  if (!Object.is(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nexport function useContext<Value>(context: Context<Value>) {\n  return useContextSelector(context, identity);\n}\n\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * concurrent rendering in React 18.\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n *\n * // Wrap set state function\n * update(() => setState(...));\n *\n * // Experimental suspense mode\n * update(() => setState(...), { suspense: true });\n */\nexport function useContextUpdate<Value>(context: Context<Value>) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const { u: update } = contextValue;\n  return update;\n}\n\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nexport const BridgeProvider = ({ context, value, children }:{\n  context: Context<any>;\n  value: any;\n  children: ReactNode;\n}) => {\n  const { [ORIGINAL_PROVIDER]: ProviderOrig } = context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<unknown>;\n  };\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, { value }, children);\n};\n\n/**\n * This hook return a value for BridgeProvider\n */\nexport const useBridgeValue = (context: Context<any>) => {\n  const bridgeValue = useContextOrig(context as unknown as ContextOrig<ContextValue<unknown>>);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue as any;\n};\n", "import * as React from 'react';\n\nimport * as ContextSelector from 'use-context-selector';\n\n/**\n * @experimental\n * @description Create a context provider and a hook to consume the context.\n *\n * @warning this may be removed to the design-system instead of becoming stable.\n */\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = ContextSelector.createContext<ContextValueType | undefined>(defaultContext);\n\n  const Provider = (props: ContextValueType & { children: React.ReactNode }) => {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  };\n\n  function useContext<Selected, ShouldThrow extends boolean = true>(\n    consumerName: string,\n    selector: (value: ContextValueType) => Selected,\n    shouldThrowOnMissingContext?: ShouldThrow\n  ) {\n    return ContextSelector.useContextSelector(Context, (ctx) => {\n      // The context is available, return the selected value\n      if (ctx) return selector(ctx);\n\n      // The context is not available, either return undefined or throw an error\n      if (shouldThrowOnMissingContext) {\n        throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n      }\n\n      return undefined;\n    }) as ShouldThrow extends true ? Selected : Selected | undefined;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAmBA,IAAGC,OAAAA;AAAtB,IACMC,IAAoBD,OAAAA;AAD1B,IAM+BE,IAHC,eAAA,OAAlBC,UACT,sBAAsBC,KAAKD,OAAOE,aAAaF,OAAOE,UAAUC,SAAAA,IAE3BC,aAAAA,YAAYC,aAAAA;AANtD,IASMC,IAAwBC,iBAAAA,2BACzBC,CAAAA,WAAsBD,iBAAAA,0BAAgBE,iBAAAA,yBAAgBD,EAAAA,IACtDA,CAAAA,OAAsBA,GAAAA;AAwFXE,SAAAA,EAAqBC,IAAAA;AACnC,QAAaC,SAAGC,aAAAA,eAAuC,EACrDC,CAACA,CAAAA,GAAgB,EACGC,GAAG,EAAEC,SAASL,GAAAA,GACdM,GAAG,EAAED,SAAAA,GAAU,GACfE,GAAG,oBAHNC,OAIGC,GAAIC,CAAAA,OAAMA,GAAAA,EAAAA,EAAAA,CAAAA;AAxEhCC,MAAAA;AAgFA,SALCV,GAEEW,CAAAA,IAAqBX,GAAQY,UAC/BZ,GAAsCY,YA9EvCF,KA8EiEV,GAAQY,UA5EjD,CAAA,EAAGC,OAAAA,IAAOC,UAAAA,GAAAA,MAAAA;AAChC,UAAMC,SAAWC,aAAAA,QAAOH,EAAAA,GACRI,SAAGD,aAAAA,QAAO,CAAA,GAAA,CACnBE,IAASC,EAAAA,QAAcC,aAAAA,UAAsC,IAAA;AAChEF,IAAAA,OACFA,GAAQL,EAAAA,GACRM,GAAW,IAAA;AAEb,UAAME,SAAeL,aAAAA,QAAAA;AACrB,QAAA,CAAKK,GAAajB,SAAS;AACzB,YAAAkB,KAAkB,oBAAlBf,OACMgB,KAAS,CAACC,IAAmBC,OAAAA;AACjCC,6BAAAA,yBAAe,MAAA;AACbT,UAAAA,GAAWb,WAAW;AACtB,gBAAYuB,KAAmC,EAC7CtB,GAAGY,GAAWb,QAAAA;AAEhB,kBAAIqB,MAAAA,GAASG,aACXD,GAAOtB,KAAAA,IACPsB,GAAOE,IAAI,IAAAC,QAAoBC,CAAAA,OAAAA;AAC7BZ,YAAAA,GAAW,MAAOhB,CAAAA,OAAAA;AAChBwB,cAAAA,GAAOxB,IAAIA,IAAAA,OAAAA,GACG0B,GACdE,GAAE5B,EAAAA;YAAAA,CAAAA;UAAAA,CAAAA,IAIR6B,GAAUC,QAASC,CAAAA,OAAaA,GAASP,EAAAA,CAAAA,GACzCH,GAAAA;QAAAA,CAAAA;MAAAA;AAGJH,MAAAA,GAAajB,UAAU,EACrBF,CAACA,CAAAA,GAAgB,EACGC,GAAGY,IACHV,GAAGY,IACHX,GAAG0B,IACHxB,GAAGe,GAAAA,EAAAA;IAAAA;AAa3B,WATAY,EAA0B,MAAA;AACxBpB,MAAAA,GAASX,UAAUS,IACnBI,GAAWb,WAAW,GACtBgC,EAAsB,MAAA;AACnBf,QAAAA,GAAajB,QAAgCF,CAAAA,EAAeI,EAAE2B,QAASC,CAAAA,OAAAA;AACtEA,UAAAA,GAAS,EAAE7B,GAAGY,GAAWb,SAASD,GAAGU,GAAAA,CAAAA;QAAAA,CAAAA;MAAAA,CAAAA;IAAAA,GAGxC,CAACA,EAAAA,CAAAA,OACGwB,aAAAA,eAAc3B,IAAc,EAAEG,OAAOQ,GAAajB,QAAAA,GAAWU,EAAAA;EAAAA,IAAAA,OA4B9Dd,GAAgBsC,UAEzBtC;AAAAA;AAeeuC,SAAAA,EACdvC,IACAwC,IAAAA;AAEA,QAAkBnB,SAAGoB,aAAAA,YACnBzC,EAAAA,EACAE,CAAAA;AACF,MAAuB,YAAA,OAAZwC,WAAiD,QAAbC,CACxCtB,GACH,OAAUuB,IAAAA,MAAM,6CAAA;AAGpB,QAAA,EACoBzC,GAAAA,EAAKC,SAASS,GAAAA,GACdR,GAAAA,EAAKD,SAASyC,GAAAA,GACdvC,GAAG0B,GAAAA,IACnBX,IACUyB,KAAGN,GAAS3B,EAAAA,GAAAA,CACnBkC,IAAOC,EAAAA,QAAYC,aAAAA,YAAW,CACnCC,IACAvB,OAAAA;AAEA,QAAA,CAAKA,GAEH,QAAO,CAACd,IAAOiC,EAAAA;AAEjB,QAAI,OAAJnB,GACE,OAAYA,GAACE;AAEf,QAAIF,GAAOtB,MAAMwC,GACf,QAAIM,OAAOC,GAAGF,GAAK,CAAA,GAAIJ,EAAAA,IAEtBI,KACM,CAACrC,IAAOiC,EAAAA;AAEjB,QAAA;AACE,UAAI,OAAAf,IAAe;AACjB,YAAIoB,OAAOC,GAAGF,GAAK,CAAA,GAAIvB,GAAOxB,CAAAA,EAC5B,QACD+C;AACD,cAAkBG,KAAGb,GAASb,GAAOxB,CAAAA;AACrC,eAAIgD,OAAOC,GAAGF,GAAK,CAAA,GAAIG,EAAAA,IAEtBH,KACM,CAACvB,GAAOxB,GAAGkD,EAAAA;MAAAA;IAAAA,SAEb/B,IAAAA;IAAAA;AAGT,WAAO,CAAA,GAAI4B,EAAAA;EAAAA,GACV,CAACrC,IAAOiC,EAAAA,CAAAA;AAYX,SAXKK,OAAOC,GAAGL,GAAM,CAAA,GAAID,EAAAA,KAGvBE,GAAAA,GAEFb,EAA0B,OACxBH,GAAUsB,IAAIN,EAAAA,GACP,MAAA;AACLhB,IAAAA,GAAUuB,OAAOP,EAAAA;EAAAA,IAElB,CAAChB,EAAAA,CAAAA,GAAAA,GACS,CAAA;AAAA;;;AC3Mf,SAASwB,cACPC,mBACAC,gBAAiC;AAEjC,QAAMC,UAA0BH,EAA4CE,cAAAA;AAE5E,QAAME,WAAW,CAACC,UAAAA;AAChB,UAAM,EAAEC,UAAU,GAAGC,QAAAA,IAAYF;AAGjC,UAAMG,QAAcC,cAAQ,MAAMF,SAASG,OAAOC,OAAOJ,OAAAA,CAAAA;AAEzD,eAAOK,wBAACT,QAAQC,UAAQ;MAACI;MAAeF;;EAC1C;AAEA,WAASO,WACPC,cACAC,UACAC,6BAAyC;AAEzC,WAAuBC,EAAmBd,SAAS,CAACe,QAAAA;AAElD,UAAIA,IAAK,QAAOH,SAASG,GAAAA;AAGzB,UAAIF,6BAA6B;AAC/B,cAAM,IAAIG,MAAM,KAAKL,YAAAA,4BAAwCb,iBAAkB,IAAG;MACpF;AAEA,aAAOmB;IACT,CAAA;EACF;AAEAhB,WAASiB,cAAcpB,oBAAoB;AAE3C,SAAO;IAACG;IAAUS;EAAW;AAC/B;",
  "names": ["CONTEXT_VALUE", "Symbol", "ORIGINAL_PROVIDER", "useIsomorphicLayoutEffect", "window", "test", "navigator", "userAgent", "useEffect", "useLayoutEffect", "runWithNormalPriority", "runWithPriority", "thunk", "NormalPriority", "createContext", "defaultValue", "context", "createContextOrig", "CONTEXT_VALUE", "v", "current", "n", "l", "Set", "u", "f", "ProviderOrig", "ORIGINAL_PROVIDER", "Provider", "value", "children", "valueRef", "useRef", "versionRef", "resolve", "setResolve", "useState", "contextValue", "e", "update", "thunk", "options", "batchedUpdates", "action", "suspense", "p", "Promise", "r", "listeners", "forEach", "listener", "useIsomorphicLayoutEffect", "runWithNormalPriority", "createElement", "Consumer", "useContextSelector", "selector", "useContextOrig", "process", "NODE_ENV", "Error", "version", "selected", "state", "dispatch", "useReducer", "prev", "Object", "is", "nextSelected", "add", "delete", "createContext", "rootComponentName", "defaultContext", "Context", "Provider", "props", "children", "context", "value", "useMemo", "Object", "values", "_jsx", "useContext", "consumerName", "selector", "shouldThrowOnMissingContext", "useContextSelector", "ctx", "Error", "undefined", "displayName"]
}
