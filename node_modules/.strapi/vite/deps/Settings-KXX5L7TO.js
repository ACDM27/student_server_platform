import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  Main,
  TextInput,
  Toggle,
  Typography,
  getTrad,
  useGetInfoQuery,
  useUpdateSettingsMutation
} from "./chunk-U6QIV7M3.js";
import "./chunk-2DDKIZGC.js";
import "./chunk-HJTIKM34.js";
import "./chunk-3TEWCJCG.js";
import "./chunk-LIBFPZMJ.js";
import "./chunk-PGLKJZAH.js";
import "./chunk-272MIYGY.js";
import "./chunk-QCYXF66P.js";
import "./chunk-UX6XWNUN.js";
import "./chunk-X2FMKSPN.js";
import "./chunk-3OTKGQ4W.js";
import "./chunk-DQWVPZAR.js";
import "./chunk-XT7OIZ4R.js";
import "./chunk-BBEG5X62.js";
import "./chunk-2RZJRG62.js";
import "./chunk-B5DUOMWO.js";
import "./chunk-NHLXZBEI.js";
import "./chunk-MMJB4H5E.js";
import "./chunk-DCPSNRCT.js";
import "./chunk-5GV5CCU4.js";
import "./chunk-LYU7PSFF.js";
import "./chunk-NU2XTA6W.js";
import "./chunk-RTXHZLTI.js";
import "./chunk-HRZKVBD4.js";
import "./chunk-O2TV2IFO.js";
import "./chunk-UDZ4CA2T.js";
import "./chunk-R4WYYBP2.js";
import "./chunk-CEVGYT4Y.js";
import "./chunk-K4X6NMBY.js";
import "./chunk-N5RDMXLZ.js";
import "./chunk-EOSFVA3O.js";
import "./chunk-K5KDL72G.js";
import "./chunk-VYNI4N7V.js";
import "./chunk-O2ORJZTY.js";
import "./chunk-3K7Y6ANF.js";
import "./chunk-MLWKHHPQ.js";
import "./chunk-PNNX4JKX.js";
import "./chunk-AV3CYYWS.js";
import "./chunk-DPXI3MID.js";
import "./chunk-HTHSVWFP.js";
import "./chunk-MXT2KIWT.js";
import "./chunk-MPFHA7KP.js";
import "./chunk-574NUVJF.js";
import "./chunk-SCG6SQPQ.js";
import "./chunk-6ROIFBND.js";
import "./chunk-UCJRQR4M.js";
import "./chunk-EZIIQT2U.js";
import "./chunk-VEA225MR.js";
import "./chunk-NPSCSU5H.js";
import "./chunk-X5XHXSAR.js";
import "./chunk-PDUBL3MZ.js";
import "./chunk-ZY65OJ5X.js";
import "./chunk-PQVWWUBX.js";
import "./chunk-KBKAM3EP.js";
import "./chunk-QD3MORRF.js";
import "./chunk-NZNWM2RE.js";
import "./chunk-CHU4SFUZ.js";
import "./chunk-RWWOU3GM.js";
import "./chunk-FL5X3F7D.js";
import "./chunk-N2CNYXMU.js";
import "./chunk-QDJF5WYD.js";
import "./chunk-X5VL5SLZ.js";
import "./chunk-WCKFS2WO.js";
import "./chunk-7A6BZZ6N.js";
import "./chunk-K4DG2J3P.js";
import "./chunk-WHD3HGHK.js";
import "./chunk-7TSLFVOL.js";
import {
  useIntl
} from "./chunk-MOFE7PQB.js";
import "./chunk-XYQYCLLF.js";
import "./chunk-323JG2SC.js";
import "./chunk-E2W3B735.js";
import "./chunk-CFMQZOSQ.js";
import "./chunk-S5ZOTVPR.js";
import "./chunk-QOAKAMUV.js";
import "./chunk-3SV42G4T.js";
import "./chunk-AROAH7FE.js";
import "./chunk-64ZQOB6W.js";
import "./chunk-F55S5FYC.js";
import "./chunk-JYB64U54.js";
import "./chunk-6IDJT6PX.js";
import "./chunk-PSVL7PC7.js";
import "./chunk-6FUELS75.js";
import "./chunk-YXHQIMTQ.js";
import "./chunk-4HNLVW3N.js";
import "./chunk-RS5QLVYF.js";
import "./chunk-PTWWMRQ3.js";
import "./chunk-2BNON3IG.js";
import "./chunk-TTQGPTYH.js";
import "./chunk-WK5QHKSE.js";
import "./chunk-RJEDBMAT.js";
import "./chunk-GRY5CIBH.js";
import "./chunk-ZQIJLUWD.js";
import "./chunk-K2OOIFPK.js";
import "./chunk-VP2E2K2Q.js";
import "./chunk-QH7RPQW5.js";
import "./chunk-6PF2L2GQ.js";
import "./chunk-KLDP6QRS.js";
import "./chunk-3IQRQO6U.js";
import "./chunk-YAGAQ35S.js";
import "./chunk-VKKXTHHG.js";
import {
  useRBAC
} from "./chunk-HU2B3PLU.js";
import "./chunk-OWYEYIEG.js";
import "./chunk-QBWAVFQM.js";
import "./chunk-ALB6BDGT.js";
import "./chunk-2DHOYMRH.js";
import "./chunk-R74LLOG4.js";
import "./chunk-IN5EE3PN.js";
import "./chunk-CKQREAIC.js";
import "./chunk-72TLDE5S.js";
import "./chunk-TRJ7VGXW.js";
import "./chunk-H4JYUR3Z.js";
import {
  Form,
  Formik
} from "./chunk-KG7MPTHB.js";
import "./chunk-EVYUV7W7.js";
import "./chunk-RROABW6X.js";
import "./chunk-YZL6BPMP.js";
import {
  errorsTrads
} from "./chunk-ZKLJSMUO.js";
import {
  create3 as create,
  create4 as create2,
  create6 as create3
} from "./chunk-2QFSRJVB.js";
import "./chunk-HRPFPB22.js";
import "./chunk-LXBM2QLI.js";
import {
  Layouts
} from "./chunk-KGXYB2CJ.js";
import "./chunk-OFQWDAEL.js";
import "./chunk-BYNHXY6R.js";
import "./chunk-D62LNZEP.js";
import "./chunk-FV7PUNXU.js";
import "./chunk-XAFAY2TB.js";
import "./chunk-GCJK33WI.js";
import "./chunk-HJDCEBSL.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-LELETK6C.js";
import "./chunk-ZYB33KYB.js";
import "./chunk-Q5GO3TLD.js";
import {
  useNotification
} from "./chunk-CPVMIZ2Q.js";
import "./chunk-ADUWLVL5.js";
import "./chunk-EMXYQVSX.js";
import "./chunk-CBHDWFW7.js";
import "./chunk-V3WE7KNX.js";
import "./chunk-XP7NPEKH.js";
import "./chunk-VNQ3D4B2.js";
import "./chunk-LMFYR3LV.js";
import "./chunk-JE5TMCS4.js";
import "./chunk-T6ZAQSJD.js";
import "./chunk-CBLEIXM4.js";
import "./chunk-IIICAW4I.js";
import "./chunk-DJEJ66WQ.js";
import "./chunk-DADZ5BXE.js";
import "./chunk-WRC7634M.js";
import "./chunk-HS47RADP.js";
import {
  ForwardRef$3B,
  ForwardRef$3D,
  ForwardRef$4F,
  PERMISSIONS
} from "./chunk-QS7LLXGO.js";
import {
  require_jsx_runtime
} from "./chunk-OWKUITKV.js";
import {
  dt
} from "./chunk-OTBGQ7VC.js";
import {
  require_react
} from "./chunk-I3AIFIJ5.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/.pnpm/@strapi+plugin-documentatio_d45989cbbf88be859e2e5cffc0725e8f/node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/.pnpm/@strapi+plugin-documentatio_d45989cbbf88be859e2e5cffc0725e8f/node_modules/@strapi/plugin-documentation/dist/admin/components/SettingsForm.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var schema = create3().shape({
  restrictedAccess: create(),
  password: create2().when("restrictedAccess", (value, initSchema) => {
    return value ? initSchema.required(errorsTrads.required.id).min(8).matches(/[a-z]/, "components.Input.error.contain.lowercase").matches(/[A-Z]/, "components.Input.error.contain.uppercase").matches(/\d/, "components.Input.error.contain.number") : initSchema;
  })
});
var FieldActionWrapper = dt(Field.Action)`
  svg {
    height: 1.6rem;
    width: 1.6rem;
    path {
      fill: ${({ theme }) => theme.colors.neutral600};
    }
  }
`;
var SettingsForm = ({ data, onSubmit }) => {
  const { formatMessage } = useIntl();
  const [passwordShown, setPasswordShown] = React.useState(false);
  const { allowedActions } = useRBAC(PERMISSIONS);
  return (0, import_jsx_runtime.jsx)(Formik, {
    enableReinitialize: true,
    initialValues: {
      restrictedAccess: (data == null ? void 0 : data.documentationAccess.restrictedAccess) || false,
      password: ""
    },
    onSubmit,
    validationSchema: schema,
    children: ({ handleSubmit, values, handleChange, errors, setFieldTouched, setFieldValue, setFieldError, dirty }) => {
      return (0, import_jsx_runtime.jsxs)(Form, {
        noValidate: true,
        onSubmit: handleSubmit,
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title: formatMessage({
              id: getTrad("plugin.name"),
              defaultMessage: "Documentation"
            }),
            subtitle: formatMessage({
              id: getTrad("pages.SettingsPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(Button, {
              type: "submit",
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4F, {}),
              disabled: !dirty && allowedActions.canUpdate,
              children: formatMessage({
                id: getTrad("pages.SettingsPage.Button.save"),
                defaultMessage: "Save"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              background: "neutral0",
              hasRadius: true,
              shadow: "filterShadow",
              paddingTop: 6,
              paddingBottom: 6,
              paddingLeft: 7,
              paddingRight: 7,
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 4,
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "delta",
                    tag: "h2",
                    children: formatMessage({
                      id: "global.settings",
                      defaultMessage: "Settings"
                    })
                  }),
                  (0, import_jsx_runtime.jsxs)(Grid.Root, {
                    gap: 4,
                    children: [
                      (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "restrictedAccess",
                          hint: formatMessage({
                            id: getTrad("pages.SettingsPage.toggle.hint"),
                            defaultMessage: "Make the documentation endpoint private"
                          }),
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: getTrad("pages.SettingsPage.toggle.label"),
                                defaultMessage: "Restricted Access"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Toggle, {
                              checked: values.restrictedAccess,
                              onChange: () => {
                                if (values.restrictedAccess === true) {
                                  setFieldValue("password", "", false);
                                  setFieldTouched("password", false, false);
                                  setFieldError("password", void 0);
                                }
                                setFieldValue("restrictedAccess", !values.restrictedAccess, false);
                              },
                              onLabel: "On",
                              offLabel: "Off"
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Hint, {})
                          ]
                        })
                      }),
                      values.restrictedAccess && (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "password",
                          error: errors.password ? formatMessage({
                            id: errors.password,
                            defaultMessage: errors.password
                          }) : void 0,
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: "global.password",
                                defaultMessage: "Password"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(TextInput, {
                              placeholder: "**********",
                              type: passwordShown ? "text" : "password",
                              value: values.password,
                              onChange: handleChange,
                              endAction: (0, import_jsx_runtime.jsx)(FieldActionWrapper, {
                                onClick: (e) => {
                                  e.stopPropagation();
                                  setPasswordShown((prev) => !prev);
                                },
                                label: formatMessage(passwordShown ? {
                                  id: "Auth.form.password.show-password",
                                  defaultMessage: "Show password"
                                } : {
                                  id: "Auth.form.password.hide-password",
                                  defaultMessage: "Hide password"
                                }),
                                children: passwordShown ? (0, import_jsx_runtime.jsx)(ForwardRef$3D, {}) : (0, import_jsx_runtime.jsx)(ForwardRef$3B, {})
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Error, {})
                          ]
                        })
                      })
                    ]
                  })
                ]
              })
            })
          })
        ]
      });
    }
  });
};

// node_modules/.pnpm/@strapi+plugin-documentatio_d45989cbbf88be859e2e5cffc0725e8f/node_modules/@strapi/plugin-documentation/dist/admin/utils/baseQuery.mjs
var isBaseQueryError = (error) => {
  return error.name !== void 0;
};

// node_modules/.pnpm/@strapi+plugin-documentatio_d45989cbbf88be859e2e5cffc0725e8f/node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var SettingsPage = () => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError, _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();
  const { data, isError, isLoading, isFetching } = useGetInfoQuery();
  const [updateSettings] = useUpdateSettingsMutation();
  const onUpdateSettings = async (body, formik) => {
    return updateSettings({
      body
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.update.success"),
          defaultMessage: "Successfully updated settings"
        })
      });
    }).catch((err) => {
      if (isBaseQueryError(err) && err.name === "ValidationError") {
        toggleNotification({
          type: "danger",
          message: formatAPIError(err)
        });
      }
    });
  };
  if (isLoading || isFetching) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime2.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime2.jsx)(Main, {
    children: (0, import_jsx_runtime2.jsx)(SettingsForm, {
      data,
      onSubmit: onUpdateSettings
    })
  });
};
export {
  SettingsPage
};
//# sourceMappingURL=Settings-KXX5L7TO.js.map
