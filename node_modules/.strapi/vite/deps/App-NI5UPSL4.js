import {
  Dialog,
  EmptyStateLayout,
  Flex,
  IconButton,
  LinkButton,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography,
  getTrad,
  useDeleteVersionMutation,
  useGetInfoQuery,
  useRegenerateDocMutation
} from "./chunk-U6QIV7M3.js";
import "./chunk-2DDKIZGC.js";
import "./chunk-HJTIKM34.js";
import "./chunk-3TEWCJCG.js";
import "./chunk-LIBFPZMJ.js";
import "./chunk-PGLKJZAH.js";
import "./chunk-272MIYGY.js";
import "./chunk-QCYXF66P.js";
import "./chunk-UX6XWNUN.js";
import "./chunk-X2FMKSPN.js";
import "./chunk-3OTKGQ4W.js";
import "./chunk-DQWVPZAR.js";
import "./chunk-XT7OIZ4R.js";
import "./chunk-BBEG5X62.js";
import "./chunk-2RZJRG62.js";
import "./chunk-B5DUOMWO.js";
import "./chunk-NHLXZBEI.js";
import "./chunk-MMJB4H5E.js";
import "./chunk-DCPSNRCT.js";
import "./chunk-5GV5CCU4.js";
import "./chunk-LYU7PSFF.js";
import "./chunk-NU2XTA6W.js";
import "./chunk-RTXHZLTI.js";
import "./chunk-HRZKVBD4.js";
import "./chunk-O2TV2IFO.js";
import "./chunk-UDZ4CA2T.js";
import "./chunk-R4WYYBP2.js";
import "./chunk-CEVGYT4Y.js";
import "./chunk-K4X6NMBY.js";
import "./chunk-N5RDMXLZ.js";
import "./chunk-EOSFVA3O.js";
import "./chunk-K5KDL72G.js";
import "./chunk-VYNI4N7V.js";
import "./chunk-O2ORJZTY.js";
import "./chunk-3K7Y6ANF.js";
import "./chunk-MLWKHHPQ.js";
import "./chunk-PNNX4JKX.js";
import "./chunk-AV3CYYWS.js";
import "./chunk-DPXI3MID.js";
import "./chunk-HTHSVWFP.js";
import "./chunk-MXT2KIWT.js";
import "./chunk-MPFHA7KP.js";
import "./chunk-574NUVJF.js";
import "./chunk-SCG6SQPQ.js";
import "./chunk-6ROIFBND.js";
import "./chunk-UCJRQR4M.js";
import "./chunk-EZIIQT2U.js";
import "./chunk-VEA225MR.js";
import "./chunk-NPSCSU5H.js";
import "./chunk-X5XHXSAR.js";
import "./chunk-PDUBL3MZ.js";
import "./chunk-ZY65OJ5X.js";
import "./chunk-PQVWWUBX.js";
import "./chunk-KBKAM3EP.js";
import "./chunk-QD3MORRF.js";
import "./chunk-NZNWM2RE.js";
import "./chunk-CHU4SFUZ.js";
import "./chunk-RWWOU3GM.js";
import "./chunk-FL5X3F7D.js";
import "./chunk-N2CNYXMU.js";
import "./chunk-QDJF5WYD.js";
import "./chunk-X5VL5SLZ.js";
import "./chunk-WCKFS2WO.js";
import "./chunk-7A6BZZ6N.js";
import "./chunk-K4DG2J3P.js";
import "./chunk-WHD3HGHK.js";
import "./chunk-7TSLFVOL.js";
import {
  useIntl
} from "./chunk-MOFE7PQB.js";
import "./chunk-XYQYCLLF.js";
import "./chunk-323JG2SC.js";
import "./chunk-E2W3B735.js";
import "./chunk-CFMQZOSQ.js";
import "./chunk-S5ZOTVPR.js";
import "./chunk-QOAKAMUV.js";
import "./chunk-3SV42G4T.js";
import "./chunk-AROAH7FE.js";
import "./chunk-64ZQOB6W.js";
import "./chunk-F55S5FYC.js";
import "./chunk-JYB64U54.js";
import "./chunk-6IDJT6PX.js";
import "./chunk-PSVL7PC7.js";
import "./chunk-6FUELS75.js";
import "./chunk-YXHQIMTQ.js";
import "./chunk-4HNLVW3N.js";
import "./chunk-RS5QLVYF.js";
import "./chunk-PTWWMRQ3.js";
import "./chunk-2BNON3IG.js";
import "./chunk-TTQGPTYH.js";
import "./chunk-WK5QHKSE.js";
import "./chunk-RJEDBMAT.js";
import "./chunk-GRY5CIBH.js";
import "./chunk-ZQIJLUWD.js";
import "./chunk-K2OOIFPK.js";
import "./chunk-VP2E2K2Q.js";
import "./chunk-QH7RPQW5.js";
import "./chunk-6PF2L2GQ.js";
import "./chunk-KLDP6QRS.js";
import "./chunk-3IQRQO6U.js";
import "./chunk-YAGAQ35S.js";
import {
  ConfirmDialog
} from "./chunk-VKKXTHHG.js";
import {
  useRBAC
} from "./chunk-HU2B3PLU.js";
import "./chunk-OWYEYIEG.js";
import "./chunk-QBWAVFQM.js";
import "./chunk-ALB6BDGT.js";
import "./chunk-2DHOYMRH.js";
import "./chunk-R74LLOG4.js";
import "./chunk-IN5EE3PN.js";
import "./chunk-CKQREAIC.js";
import "./chunk-72TLDE5S.js";
import "./chunk-TRJ7VGXW.js";
import "./chunk-H4JYUR3Z.js";
import "./chunk-KG7MPTHB.js";
import "./chunk-EVYUV7W7.js";
import "./chunk-RROABW6X.js";
import "./chunk-YZL6BPMP.js";
import "./chunk-ZKLJSMUO.js";
import "./chunk-2QFSRJVB.js";
import "./chunk-HRPFPB22.js";
import "./chunk-LXBM2QLI.js";
import {
  Layouts
} from "./chunk-KGXYB2CJ.js";
import "./chunk-OFQWDAEL.js";
import "./chunk-BYNHXY6R.js";
import "./chunk-D62LNZEP.js";
import "./chunk-FV7PUNXU.js";
import "./chunk-XAFAY2TB.js";
import "./chunk-GCJK33WI.js";
import "./chunk-HJDCEBSL.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-LELETK6C.js";
import "./chunk-ZYB33KYB.js";
import "./chunk-Q5GO3TLD.js";
import {
  useNotification
} from "./chunk-CPVMIZ2Q.js";
import "./chunk-ADUWLVL5.js";
import "./chunk-EMXYQVSX.js";
import "./chunk-CBHDWFW7.js";
import "./chunk-V3WE7KNX.js";
import "./chunk-XP7NPEKH.js";
import "./chunk-VNQ3D4B2.js";
import "./chunk-LMFYR3LV.js";
import "./chunk-JE5TMCS4.js";
import "./chunk-T6ZAQSJD.js";
import "./chunk-CBLEIXM4.js";
import "./chunk-IIICAW4I.js";
import "./chunk-DJEJ66WQ.js";
import "./chunk-DADZ5BXE.js";
import "./chunk-WRC7634M.js";
import "./chunk-HS47RADP.js";
import {
  ForwardRef$3D,
  ForwardRef$5n,
  ForwardRef$j,
  PERMISSIONS
} from "./chunk-QS7LLXGO.js";
import {
  require_jsx_runtime
} from "./chunk-OWKUITKV.js";
import {
  dt
} from "./chunk-OTBGQ7VC.js";
import {
  require_react
} from "./chunk-I3AIFIJ5.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/.pnpm/@strapi+plugin-documentatio_d45989cbbf88be859e2e5cffc0725e8f/node_modules/@strapi/plugin-documentation/dist/admin/pages/App.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var App = () => {
  var _a;
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { data, isLoading: isLoadingInfo, isError } = useGetInfoQuery();
  const [regenerate] = useRegenerateDocMutation();
  const [deleteVersion] = useDeleteVersionMutation();
  const [showConfirmDelete, setShowConfirmDelete] = React.useState(false);
  const [versionToDelete, setVersionToDelete] = React.useState();
  const { allowedActions, isLoading: isLoadingRBAC } = useRBAC(PERMISSIONS);
  const isLoading = isLoadingInfo || isLoadingRBAC;
  const colCount = 4;
  const rowCount = (((_a = data == null ? void 0 : data.docVersions) == null ? void 0 : _a.length) || 0) + 1;
  const handleRegenerateDoc = (version) => {
    regenerate({
      version
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.generate.success"),
          defaultMessage: "Successfully generated documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
  };
  const handleConfirmDelete = async () => {
    if (!versionToDelete) {
      return;
    }
    await deleteVersion({
      version: versionToDelete
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.delete.success"),
          defaultMessage: "Successfully deleted documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
    setShowConfirmDelete(!showConfirmDelete);
  };
  const handleClickDelete = (version) => {
    setVersionToDelete(version);
    setShowConfirmDelete(!showConfirmDelete);
  };
  const title = formatMessage({
    id: getTrad("plugin.name"),
    defaultMessage: "Documentation"
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: title
      }),
      (0, import_jsx_runtime.jsxs)(Page.Main, {
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title,
            subtitle: formatMessage({
              id: getTrad("pages.PluginPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(OpenDocLink, {
              disabled: !allowedActions.canRead || !(data == null ? void 0 : data.currentVersion) || !(data == null ? void 0 : data.prefix),
              href: createDocumentationHref(`${data == null ? void 0 : data.prefix}/v${data == null ? void 0 : data.currentVersion}`),
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3D, {}),
              children: formatMessage({
                id: getTrad("pages.PluginPage.Button.open"),
                defaultMessage: "Open Documentation"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (data == null ? void 0 : data.docVersions.length) ? (0, import_jsx_runtime.jsxs)(Table, {
              colCount,
              rowCount,
              children: [
                (0, import_jsx_runtime.jsx)(Thead, {
                  children: (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.version"),
                            defaultMessage: "Version"
                          })
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.generated"),
                            defaultMessage: "Last Generated"
                          })
                        })
                      })
                    ]
                  })
                }),
                (0, import_jsx_runtime.jsx)(Tbody, {
                  children: data.docVersions.slice(0).sort((a, b) => a.generatedDate < b.generatedDate ? 1 : -1).map((doc) => (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.version
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.generatedDate
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        children: (0, import_jsx_runtime.jsxs)(Flex, {
                          justifyContent: "end",
                          onClick: (e) => e.stopPropagation(),
                          children: [
                            (0, import_jsx_runtime.jsx)(IconButton, {
                              tag: "a",
                              disabled: !allowedActions.canRead,
                              href: createDocumentationHref(`${data.prefix}/v${doc.version}`),
                              variant: "ghost",
                              target: "_blank",
                              rel: "noopener noreferrer",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.show"),
                                defaultMessage: "Open {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$3D, {})
                            }),
                            allowedActions.canRegenerate ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleRegenerateDoc(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.regenerate"),
                                defaultMessage: "Regenerate {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$5n, {})
                            }) : null,
                            allowedActions.canUpdate && doc.version !== data.currentVersion ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleClickDelete(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: "global.delete-target",
                                defaultMessage: "Delete {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$j, {})
                            }) : null
                          ]
                        })
                      })
                    ]
                  }, doc.version))
                })
              ]
            }) : (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
              content: "",
              icon: null
            })
          }),
          (0, import_jsx_runtime.jsx)(Dialog.Root, {
            open: showConfirmDelete,
            onOpenChange: setShowConfirmDelete,
            children: (0, import_jsx_runtime.jsx)(ConfirmDialog, {
              onConfirm: handleConfirmDelete
            })
          })
        ]
      })
    ]
  });
};
var OpenDocLink = dt(LinkButton)`
  text-decoration: none;
`;
var createDocumentationHref = (path) => {
  if (path.startsWith("http")) {
    return path;
  }
  if (path.startsWith("/")) {
    return `${window.strapi.backendURL}${path}`;
  }
  return `${window.strapi.backendURL}/${path}`;
};
export {
  App
};
//# sourceMappingURL=App-NI5UPSL4.js.map
