import {
  Header,
  Root,
  useReviewWorkflows
} from "./chunk-GGNJ5QXI.js";
import {
  LimitsModal
} from "./chunk-574NUVJF.js";
import {
  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,
  useGetContentTypesQuery
} from "./chunk-UCJRQR4M.js";
import {
  useTypedSelector
} from "./chunk-EZIIQT2U.js";
import "./chunk-XYQYCLLF.js";
import "./chunk-323JG2SC.js";
import "./chunk-CFMQZOSQ.js";
import "./chunk-S5ZOTVPR.js";
import "./chunk-QOAKAMUV.js";
import "./chunk-3SV42G4T.js";
import "./chunk-64ZQOB6W.js";
import "./chunk-F55S5FYC.js";
import "./chunk-JYB64U54.js";
import "./chunk-6IDJT6PX.js";
import "./chunk-PSVL7PC7.js";
import {
  useLicenseLimits
} from "./chunk-6FUELS75.js";
import "./chunk-YXHQIMTQ.js";
import "./chunk-4HNLVW3N.js";
import "./chunk-RS5QLVYF.js";
import "./chunk-PTWWMRQ3.js";
import "./chunk-2BNON3IG.js";
import "./chunk-TTQGPTYH.js";
import "./chunk-WK5QHKSE.js";
import {
  Table
} from "./chunk-RJEDBMAT.js";
import "./chunk-GRY5CIBH.js";
import "./chunk-ZQIJLUWD.js";
import "./chunk-K2OOIFPK.js";
import "./chunk-VP2E2K2Q.js";
import "./chunk-QH7RPQW5.js";
import "./chunk-6PF2L2GQ.js";
import "./chunk-KLDP6QRS.js";
import "./chunk-3IQRQO6U.js";
import "./chunk-YAGAQ35S.js";
import {
  ConfirmDialog
} from "./chunk-VKKXTHHG.js";
import {
  useRBAC
} from "./chunk-HU2B3PLU.js";
import "./chunk-ALB6BDGT.js";
import "./chunk-CKQREAIC.js";
import "./chunk-72TLDE5S.js";
import "./chunk-H4JYUR3Z.js";
import "./chunk-KG7MPTHB.js";
import "./chunk-EVYUV7W7.js";
import "./chunk-RROABW6X.js";
import "./chunk-YZL6BPMP.js";
import "./chunk-ZKLJSMUO.js";
import "./chunk-2QFSRJVB.js";
import "./chunk-HRPFPB22.js";
import "./chunk-LXBM2QLI.js";
import "./chunk-KGXYB2CJ.js";
import {
  useTracking
} from "./chunk-OFQWDAEL.js";
import "./chunk-BYNHXY6R.js";
import "./chunk-D62LNZEP.js";
import "./chunk-FV7PUNXU.js";
import "./chunk-XAFAY2TB.js";
import "./chunk-GCJK33WI.js";
import "./chunk-HJDCEBSL.js";
import {
  Page
} from "./chunk-LELETK6C.js";
import "./chunk-ZYB33KYB.js";
import "./chunk-Q5GO3TLD.js";
import "./chunk-CPVMIZ2Q.js";
import "./chunk-ADUWLVL5.js";
import "./chunk-EMXYQVSX.js";
import "./chunk-CBHDWFW7.js";
import "./chunk-V3WE7KNX.js";
import "./chunk-XP7NPEKH.js";
import "./chunk-VNQ3D4B2.js";
import "./chunk-LMFYR3LV.js";
import "./chunk-JE5TMCS4.js";
import {
  useIntl
} from "./chunk-T6ZAQSJD.js";
import "./chunk-CBLEIXM4.js";
import {
  Dialog,
  Flex,
  ForwardRef$1l,
  ForwardRef$1z,
  ForwardRef$n,
  IconButton,
  LinkButton,
  TFooter,
  Typography
} from "./chunk-IIICAW4I.js";
import "./chunk-DJEJ66WQ.js";
import "./chunk-DADZ5BXE.js";
import {
  Link,
  NavLink,
  useNavigate
} from "./chunk-WRC7634M.js";
import "./chunk-HS47RADP.js";
import {
  require_jsx_runtime
} from "./chunk-OWKUITKV.js";
import "./chunk-OTBGQ7VC.js";
import {
  require_react
} from "./chunk-I3AIFIJ5.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/.pnpm/@strapi+review-workflows@5._283a5d16d67b290c10335ecc35b6700a/node_modules/@strapi/review-workflows/dist/admin/routes/settings/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var ReviewWorkflowsListView = () => {
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const [workflowToDelete, setWorkflowToDelete] = React.useState(null);
  const [showLimitModal, setShowLimitModal] = React.useState(false);
  const { data, isLoading: isLoadingModels } = useGetContentTypesQuery();
  const { meta, workflows, isLoading, delete: deleteAction } = useReviewWorkflows();
  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["review-workflows"];
  });
  const { allowedActions: { canCreate, canRead, canUpdate, canDelete } } = useRBAC(permissions);
  const limits = getFeature("review-workflows");
  const numberOfWorkflows = limits == null ? void 0 : limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];
  const handleDeleteWorkflow = (workflowId) => {
    setWorkflowToDelete(workflowId);
  };
  const toggleConfirmDeleteDialog = () => {
    setWorkflowToDelete(null);
  };
  const handleConfirmDeleteDialog = async () => {
    if (!workflowToDelete) return;
    await deleteAction(workflowToDelete);
    setWorkflowToDelete(null);
  };
  const handleCreateClick = (event) => {
    event.preventDefault();
    if (numberOfWorkflows && meta && (meta == null ? void 0 : meta.workflowCount) >= parseInt(numberOfWorkflows, 10)) {
      event.preventDefault();
      setShowLimitModal(true);
    } else {
      navigate("create");
      trackUsage("willCreateWorkflow");
    }
  };
  React.useEffect(() => {
    if (!isLoading && !isLicenseLoading) {
      if (numberOfWorkflows && meta && (meta == null ? void 0 : meta.workflowCount) > parseInt(numberOfWorkflows, 10)) {
        setShowLimitModal(true);
      }
    }
  }, [
    isLicenseLoading,
    isLoading,
    meta,
    meta == null ? void 0 : meta.workflowCount,
    numberOfWorkflows
  ]);
  const headers = [
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.name.title",
        defaultMessage: "Name"
      }),
      name: "name"
    },
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.stages.title",
        defaultMessage: "Stages"
      }),
      name: "stages"
    },
    {
      label: formatMessage({
        id: "Settings.review-workflows.list.page.list.column.contentTypes.title",
        defaultMessage: "Content Types"
      }),
      name: "content-types"
    }
  ];
  if (isLoading || isLoadingModels) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  const contentTypes = Object.values(data ?? {}).reduce((acc, curr) => {
    acc.push(...curr);
    return acc;
  }, []);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)(Header, {
        primaryAction: canCreate ? (0, import_jsx_runtime.jsx)(LinkButton, {
          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}),
          size: "S",
          tag: NavLink,
          to: "create",
          onClick: handleCreateClick,
          children: formatMessage({
            id: "Settings.review-workflows.list.page.create",
            defaultMessage: "Create new workflow"
          })
        }) : null,
        subtitle: formatMessage({
          id: "Settings.review-workflows.list.page.subtitle",
          defaultMessage: "Manage your content review process"
        }),
        title: formatMessage({
          id: "Settings.review-workflows.list.page.title",
          defaultMessage: "Review Workflows"
        })
      }),
      (0, import_jsx_runtime.jsxs)(Root, {
        children: [
          (0, import_jsx_runtime.jsx)(Table.Root, {
            isLoading,
            rows: workflows,
            footer: canCreate ? (0, import_jsx_runtime.jsx)(TFooter, {
              cursor: "pointer",
              icon: (0, import_jsx_runtime.jsx)(ForwardRef$1l, {}),
              onClick: handleCreateClick,
              children: formatMessage({
                id: "Settings.review-workflows.list.page.create",
                defaultMessage: "Create new workflow"
              })
            }) : null,
            headers,
            children: (0, import_jsx_runtime.jsxs)(Table.Content, {
              children: [
                (0, import_jsx_runtime.jsx)(Table.Head, {
                  children: headers.map((head) => (0, import_jsx_runtime.jsx)(Table.HeaderCell, {
                    ...head
                  }, head.name))
                }),
                (0, import_jsx_runtime.jsx)(Table.Body, {
                  children: workflows.map((workflow) => (0, import_jsx_runtime.jsxs)(Table.Row, {
                    onClick: () => {
                      navigate(`${workflow.id}`);
                    },
                    children: [
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        width: "25rem",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          textColor: "neutral800",
                          fontWeight: "bold",
                          ellipsis: true,
                          children: workflow.name
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          textColor: "neutral800",
                          children: workflow.stages.length
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          textColor: "neutral800",
                          children: workflow.contentTypes.map((uid) => {
                            const contentType = contentTypes.find((contentType2) => contentType2.uid === uid);
                            return (contentType == null ? void 0 : contentType.info.displayName) ?? "";
                          }).join(", ")
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Table.Cell, {
                        children: (0, import_jsx_runtime.jsxs)(Flex, {
                          alignItems: "center",
                          justifyContent: "end",
                          children: [
                            canRead || canUpdate ? (0, import_jsx_runtime.jsx)(IconButton, {
                              tag: Link,
                              to: workflow.id.toString(),
                              label: formatMessage({
                                id: "Settings.review-workflows.list.page.list.column.actions.edit.label",
                                defaultMessage: "Edit {name}"
                              }, {
                                name: workflow.name
                              }),
                              variant: "ghost",
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
                            }) : null,
                            workflows.length > 1 && canDelete ? (0, import_jsx_runtime.jsx)(IconButton, {
                              withTooltip: false,
                              label: formatMessage({
                                id: "Settings.review-workflows.list.page.list.column.actions.delete.label",
                                defaultMessage: "Delete {name}"
                              }, {
                                name: "Default workflow"
                              }),
                              variant: "ghost",
                              onClick: (e) => {
                                e.stopPropagation();
                                handleDeleteWorkflow(String(workflow.id));
                              },
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$n, {})
                            }) : null
                          ]
                        })
                      })
                    ]
                  }, workflow.id))
                })
              ]
            })
          }),
          (0, import_jsx_runtime.jsx)(Dialog.Root, {
            open: !!workflowToDelete,
            onOpenChange: toggleConfirmDeleteDialog,
            children: (0, import_jsx_runtime.jsx)(ConfirmDialog, {
              onConfirm: handleConfirmDeleteDialog,
              children: formatMessage({
                id: "Settings.review-workflows.list.page.delete.confirm.body",
                defaultMessage: "If you remove this worfklow, all stage-related information will be removed for this content-type. Are you sure you want to remove it?"
              })
            })
          }),
          (0, import_jsx_runtime.jsxs)(LimitsModal.Root, {
            open: showLimitModal,
            onOpenChange: () => setShowLimitModal(false),
            children: [
              (0, import_jsx_runtime.jsx)(LimitsModal.Title, {
                children: formatMessage({
                  id: "Settings.review-workflows.list.page.workflows.limit.title",
                  defaultMessage: "You’ve reached the limit of workflows in your plan"
                })
              }),
              (0, import_jsx_runtime.jsx)(LimitsModal.Body, {
                children: formatMessage({
                  id: "Settings.review-workflows.list.page.workflows.limit.body",
                  defaultMessage: "Delete a workflow or contact Sales to enable more workflows."
                })
              })
            ]
          })
        ]
      })
    ]
  });
};
var ProtectedListPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a, _b;
    return (_b = (_a = state.admin_app.permissions.settings) == null ? void 0 : _a["review-workflows"]) == null ? void 0 : _b.main;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(ReviewWorkflowsListView, {})
  });
};
export {
  ProtectedListPage,
  ReviewWorkflowsListView
};
//# sourceMappingURL=settings-YSCYUP75.js.map
